name: Build and push docker images

on:
  workflow_call:
    secrets:
      ACTIONS_AWS_ACCESS_KEY_ID:
        required: true
      ACTIONS_AWS_ACCESS_KEY:
        required: true
      WEB_API_KEY:
        required: true
      WEB_AUTH_DOMAIN:
        required: true
      WEB_PROJECT_ID:
        required: true
      WEB_STORAGE_BUCKET:
        required: true
      WEB_MESSAGING_SENDER_ID:
        required: true
      WEB_APP_ID:
        required: true
      WEB_MEASUREMENT_ID:
        required: true
      ADMIN_TYPE:
        required: true
      ADMIN_PROJECT_ID:
        required: true
      ADMIN_PRIVATE_KEY_ID:
        required: true
      ADMIN_PRIVATE_KEY:
        required: true
      ADMIN_CLIENT_EMAIL:
        required: true
      ADMIN_CLIENT_ID:
        required: true
      ADMIN_AUTH_URI:
        required: true
      ADMIN_TOKEN_URI:
        required: true
      ADMIN_AUTH_PROVIDER_X509_CERT_URL:
        required: true
      ADMIN_CLIENT_X509_CERT_URL:
        required: true
jobs:
  build-and-push:
    name: Build, tag and push images to Amazon ECR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use scripts/write_config_files.sh to write 2 firebase config files
        env:
          WEB_API_KEY: ${{ secrets.WEB_API_KEY }}
          WEB_AUTH_DOMAIN: ${{ secrets.WEB_AUTH_DOMAIN }}
          WEB_PROJECT_ID: ${{ secrets.WEB_PROJECT_ID }}
          WEB_STORAGE_BUCKET: ${{ secrets.WEB_STORAGE_BUCKET }}
          WEB_MESSAGING_SENDER_ID: ${{ secrets.WEB_MESSAGING_SENDER_ID }}
          WEB_APP_ID: ${{ secrets.WEB_APP_ID }}
          WEB_MEASUREMENT_ID: ${{ secrets.WEB_MEASUREMENT_ID }}

          ADMIN_TYPE: ${{ secrets.ADMIN_TYPE }}
          ADMIN_PROJECT_ID: ${{ secrets.ADMIN_PROJECT_ID }}
          ADMIN_PRIVATE_KEY_ID: ${{ secrets.ADMIN_PRIVATE_KEY_ID }}
          ADMIN_PRIVATE_KEY: ${{ secrets.ADMIN_PRIVATE_KEY }}
          ADMIN_CLIENT_EMAIL: ${{ secrets.ADMIN_CLIENT_EMAIL }}
          ADMIN_CLIENT_ID: ${{ secrets.ADMIN_CLIENT_ID }}
          ADMIN_AUTH_URI: ${{ secrets.ADMIN_AUTH_URI }}
          ADMIN_TOKEN_URI: ${{ secrets.ADMIN_TOKEN_URI }}
          ADMIN_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.ADMIN_AUTH_PROVIDER_X509_CERT_URL }}
          ADMIN_CLIENT_X509_CERT_URL: ${{ secrets.ADMIN_CLIENT_X509_CERT_URL }}

        shell: bash
        # $ADMIN_PRIVATE_KEY in double quote "" because it's a long, white-spaced string
        run: >
          bash ${GITHUB_WORKSPACE}/scripts/write_config_files.sh
          $WEB_API_KEY
          $WEB_AUTH_DOMAIN
          $WEB_PROJECT_ID
          $WEB_STORAGE_BUCKET
          $WEB_MESSAGING_SENDER_ID
          $WEB_APP_ID
          $WEB_MEASUREMENT_ID     
          $ADMIN_TYPE
          $ADMIN_PROJECT_ID
          $ADMIN_PRIVATE_KEY_ID
          "$ADMIN_PRIVATE_KEY"
          $ADMIN_CLIENT_EMAIL
          $ADMIN_CLIENT_ID
          $ADMIN_AUTH_URI
          $ADMIN_TOKEN_URI
          $ADMIN_AUTH_PROVIDER_X509_CERT_URL
          $ADMIN_CLIENT_X509_CERT_URL

      - name: Build and run containers using docker-compose
        run: |
          docker-compose -f docker/docker-compose.yml -f docker/production.yml build

      - name: Tag ECR images
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: 503112169699.dkr.ecr.us-east-1.amazonaws.com
        run: |
          docker tag sw-nginx:latest $REGISTRY/sw-nginx:$IMAGE_TAG
          docker tag sw-web:latest $REGISTRY/sw-web:$IMAGE_TAG
          docker tag sw-api:latest $REGISTRY/sw-api:$IMAGE_TAG
          docker images

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_AWS_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: 503112169699.dkr.ecr.us-east-1.amazonaws.com
        run: |
          docker push $REGISTRY/sw-nginx:$IMAGE_TAG
          docker push $REGISTRY/sw-api:$IMAGE_TAG
          docker push $REGISTRY/sw-web:$IMAGE_TAG
